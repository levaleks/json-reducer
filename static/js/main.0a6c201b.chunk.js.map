{"version":3,"sources":["components/EslintReportExplorer/EslintReportExplorer.styled.ts","components/EslintReportExplorer/components/InputJSONPane/InputJSONPane.styled.ts","components/EslintReportExplorer/helpers/getExampleFile.ts","components/EslintReportExplorer/core/input-json-handler.ts","components/EslintReportExplorer/EslintReportExplorerStore.ts","utils/UseNonNullableContext/NoContextProviderError.ts","utils/UseNonNullableContext/useNonNullableContext.ts","components/EslintReportExplorer/components/InputJSONPane/helpers/getErrorMessageFromError.ts","components/EslintReportExplorer/hooks/useErrorMessage.ts","components/EslintReportExplorer/components/InputJSONPane/InputJSONPane.tsx","components/EslintReportExplorer/components/CodeEditorPane/CodeEditorPane.styled.ts","components/EslintReportExplorer/components/CodeEditorPane/CodeEditorPane.tsx","components/EslintReportExplorer/components/OutputJSONPane/OutputJSONPane.tsx","components/EslintReportExplorer/EslintReportExplorer.tsx","components/muiTheme.ts","components/App.tsx","index.tsx"],"names":["EslintReportExplorer","styled","Container","height","LinkWithIcon","Link","display","alignItems","color","gap","fontSize","InnerContainer","Stack","theme","paddingTop","spacing","paddingBottom","SplitPaneWrapper","Paper","position","PaneWrapper","background","PaneToolbar","Toolbar","ToolbarIconButton","IconButton","flexShrink","ToolbarButton","Button","PaneContent","Box","flexDirection","flexGrow","ScrollableBox","top","left","width","maxHeight","overflowY","padding","NotificationBackdrop","Backdrop","palette","paper","ErrorsList","marginBottom","NotificationError","Alert","maxWidth","FileName","Typography","textOverflow","overflow","HANDLER_ARG_NAME","HANDLER_BODY","createHandlerFromBodyString","body","Function","EslintReportExplorerStore","constructor","shouldShowOnBeforeUnloadPopup","inputFile","name","content","id","email","phone","handler","fn","error","output","value","makeAutoObservable","this","observable","ref","autoBind","setInputFile","file","setHandler","handlerBody","e","Error","applyHandlerToInputFileContent","EslintReportExplorerStoreContext","createContext","NoContextProviderError","contextNameHint","super","trim","useNonNullableContext","context","store","useContext","getErrorMessageFromError","fileSizeTooSmall","fileSizeToolarge","readerError","maxLimitExceeded","minLimitNotReached","useErrorMessage","initialErrorMessage","errorMessage","setErrorMessage","useState","clearErrorMessage","ExportJSONPane","observer","eslintReportExplorerStore","openFileSelector","filesContent","loading","clear","errors","useFilePicker","accept","multiple","length","title","map","jsonValue","JSON","parse","isPlainObject","Array","isArray","message","String","src","enableClipboard","open","Boolean","CircularProgress","size","variant","severity","onClose","AlertTitle","AppBar","sx","onClick","endIcon","ReadonlyHandlerParts","font","HandlerKeyword","fontStyle","HandlerName","HandlerArg","EditorWrapper","CodeEditorPane","useTheme","clipboard","useClipboard","hasCopied","setHasCopied","syntaxErrorMessage","setSyntaxErrorMessage","useEffect","executionErrorMessage","setExecutionErrorMessage","clearExecutionErrorMessage","borderBottom","divider","placeholder","mode","onChange","showPrintMargin","showGutter","highlightActiveLine","defaultValue","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","tabSize","borderTop","Tooltip","componentsProps","tooltip","cursor","copy","toString","setTimeout","disabled","OutputJSONPane","stringifiedOutput","stringify","undefined","fileDownload","href","underline","target","rel","alt","elevation","split","resizerOptions","css","muiTheme","createTheme","App","useBeforeunload","preventDefault","ThemeProvider","CssBaseline","GlobalStyles","styles","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a6c201b.chunk.js","sourcesContent":["import {\n    styled,\n    Container,\n    Paper,\n    Stack,\n    Box,\n    Toolbar,\n    IconButton,\n    Button,\n    Backdrop,\n    Alert,\n    Link,\n} from '@mui/material';\n\nexport const EslintReportExplorer = styled(Container)(() => ({\n    height: '100%',\n}));\n\nexport const LinkWithIcon = styled(Link)(() => ({\n    display: 'flex',\n    alignItems: 'center',\n    color: 'white',\n    gap: '8px',\n    fontSize: '14px',\n}));\n\nexport const InnerContainer = styled(Stack)(({ theme }) => ({\n    height: '100%',\n    paddingTop: theme.spacing(3),\n    paddingBottom: theme.spacing(3),\n    gap: theme.spacing(2),\n}));\n\nexport const SplitPaneWrapper = styled(Paper)(() => ({\n    position: 'relative',\n    height: '100%',\n}));\n\nexport const PaneWrapper = styled(Stack)(() => ({\n    height: '100%',\n    background: '#272822',\n}));\n\nexport const PaneToolbar = styled(Toolbar)(({ theme }) => ({\n    gap: theme.spacing(1),\n}));\n\nexport const ToolbarIconButton = styled(IconButton)(() => ({\n    flexShrink: 0,\n}));\n\nexport const ToolbarButton = styled(Button)(() => ({\n    flexShrink: 0,\n}));\n\nexport const PaneContent = styled(Box)(() => ({\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    position: 'relative',\n}));\n\nexport const ScrollableBox = styled(Box)(({ theme }) => ({\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    maxHeight: '100%',\n    overflowY: 'auto',\n    padding: theme.spacing(1),\n}));\n\nexport const NotificationBackdrop = styled(Backdrop)(({ theme }) => ({\n    position: 'absolute',\n    background: `${theme.palette.background.paper}33`,\n}));\n\nexport const ErrorsList = styled('ul')(({ theme }) => ({\n    marginBottom: 0,\n    padding: theme.spacing(0, 0, 0, 2),\n}));\n\nexport const NotificationError = styled(Alert)(() => ({\n    maxWidth: '80%',\n}));\n","import { styled, Typography } from '@mui/material';\n\nexport const FileName = styled(Typography)(() => ({\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n}));\n","import type { File } from '../abstracts/File';\n\nexport const getExampleFile = (): File => ({\n    name: 'example.json',\n    content: [\n        {\n            id: 1,\n            name: 'Leanne Graham',\n            email: 'Sincere@april.biz',\n        },\n        {\n            id: 2,\n            name: 'Ervin Howell',\n        },\n        {\n            id: 3,\n            name: 'Clementine Bauch',\n            email: 'Nathan@yesenia.net',\n            phone: '1-463-123-4447',\n        },\n    ],\n});\n","import type { JsonArray, JsonObject } from 'type-fest';\n\nexport const HANDLER_KEYWORD = 'function';\nexport const HANDLER_NAME = 'anonymous';\nexport const HANDLER_ARG_NAME = 'jsonValue';\nexport const HANDLER_BODY = `return ${HANDLER_ARG_NAME};`;\n\nexport type ValidJSONValue = JsonObject | JsonArray;\n\nexport type InputJsonHandler = (jsonValue: ValidJSONValue) => ValidJSONValue;\n\nexport const createHandlerFromBodyString = (body: string): InputJsonHandler => {\n    // eslint-disable-next-line no-new-func\n    return new Function(HANDLER_ARG_NAME, body) as InputJsonHandler;\n};\n","import { createContext } from 'react';\nimport { makeAutoObservable, observable } from 'mobx';\nimport type { File } from './abstracts/File';\nimport { getExampleFile } from './helpers/getExampleFile';\nimport { createHandlerFromBodyString, HANDLER_BODY, InputJsonHandler, ValidJSONValue } from './core/input-json-handler';\n\nexport interface Output {\n    value: ValidJSONValue;\n    error: Error | null;\n}\n\nexport interface Handler {\n    fn: InputJsonHandler;\n    error: Error | null;\n}\n\nexport class EslintReportExplorerStore {\n    constructor() {\n        makeAutoObservable(\n            this,\n            {\n                inputFile: observable.ref,\n                handler: observable.ref,\n                output: observable.ref,\n            },\n            { autoBind: true },\n        );\n    }\n\n    shouldShowOnBeforeUnloadPopup = false;\n\n    inputFile = getExampleFile();\n\n    setInputFile(file: File): void {\n        this.inputFile = file;\n        this.shouldShowOnBeforeUnloadPopup = true;\n    }\n\n    handler: Handler = {\n        fn: createHandlerFromBodyString(HANDLER_BODY),\n        error: null,\n    };\n\n    setHandler(handlerBody: string): void {\n        try {\n            this.handler = { fn: createHandlerFromBodyString(handlerBody), error: null };\n            this.shouldShowOnBeforeUnloadPopup = true;\n        } catch (e) {\n            this.handler = {\n                fn: this.handler.fn,\n                error: e instanceof Error ? e : new Error(`Unknown: ${e}`),\n            };\n        }\n    }\n\n    output: Output = { value: {}, error: null };\n\n    applyHandlerToInputFileContent(): void {\n        try {\n            this.output = { value: this.handler.fn(this.inputFile.content), error: null };\n            this.shouldShowOnBeforeUnloadPopup = true;\n        } catch (e) {\n            this.output = {\n                value: {},\n                error: e instanceof Error ? e : new Error(`Unknown: ${e}`),\n            };\n        }\n    }\n}\n\nexport const EslintReportExplorerStoreContext = createContext<EslintReportExplorerStore | null>(null);\n","export class NoContextProviderError extends Error {\n    constructor(contextNameHint?: string) {\n        super(\n            `Component is used outside of context provider. ${\n                contextNameHint ? `Check ${contextNameHint}.` : ''\n            }`.trim(),\n        );\n\n        this.name = 'NoContextProviderError';\n    }\n}\n","import React, { useContext } from 'react';\nimport { NoContextProviderError } from './NoContextProviderError';\n\nexport const useNonNullableContext = <T>(context: React.Context<T>): NonNullable<T> => {\n    const store = useContext(context);\n\n    if (!store) throw new NoContextProviderError();\n\n    return store as NonNullable<T>;\n};\n","import type { FileError } from 'use-file-picker/src/interfaces';\n\nexport const getErrorMessageFromError = (e: FileError): string => {\n    if (e.fileSizeTooSmall) return 'File size is too small!';\n    if (e.fileSizeToolarge) return 'File size is too large!';\n    if (e.readerError) return 'Problem occured while reading file!';\n    if (e.maxLimitExceeded) return 'Too many files';\n    if (e.minLimitNotReached) return 'Not enought files';\n\n    return 'Unknown error';\n};\n","import React, { useState } from 'react';\n\nexport type ErrorMessage = {\n    title: React.ReactNode;\n    body: React.ReactNode;\n} | null;\n\nexport const useErrorMessage = (\n    initialErrorMessage: ErrorMessage,\n): {\n    errorMessage: ErrorMessage;\n    setErrorMessage(errorMessage: ErrorMessage): void;\n    clearErrorMessage(): void;\n} => {\n    const [errorMessage, setErrorMessage] = useState<ErrorMessage>(initialErrorMessage);\n\n    const clearErrorMessage = (): void => setErrorMessage(null);\n\n    return { errorMessage, setErrorMessage, clearErrorMessage };\n};\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { AlertTitle, AppBar, Box, CircularProgress } from '@mui/material';\nimport FileOpenOutlinedIcon from '@mui/icons-material/FileOpenOutlined';\nimport ReactJson from 'react-json-view';\nimport { useFilePicker } from 'use-file-picker';\nimport { isPlainObject } from 'lodash-es';\nimport * as shared$ from '../../EslintReportExplorer.styled';\nimport * as $ from './InputJSONPane.styled';\nimport { EslintReportExplorerStoreContext } from '../../EslintReportExplorerStore';\nimport { useNonNullableContext } from '../../../../utils/UseNonNullableContext';\nimport { getErrorMessageFromError } from './helpers/getErrorMessageFromError';\nimport { useErrorMessage } from '../../hooks/useErrorMessage';\n\nexport const ExportJSONPane: React.FC = observer(() => {\n    const eslintReportExplorerStore = useNonNullableContext(EslintReportExplorerStoreContext);\n\n    const [openFileSelector, { filesContent, loading, clear, errors }] = useFilePicker({\n        accept: '.json',\n        multiple: false,\n    });\n\n    const { errorMessage, setErrorMessage, clearErrorMessage } = useErrorMessage(null);\n\n    if (!loading && errors.length) {\n        setErrorMessage({\n            title: 'File error',\n            body:\n                errors.length > 1 ? (\n                    <shared$.ErrorsList>\n                        {errors.map((e) => (\n                            <li>{getErrorMessageFromError(e)}</li>\n                        ))}\n                    </shared$.ErrorsList>\n                ) : (\n                    getErrorMessageFromError(errors[0])\n                ),\n        });\n\n        clear();\n    }\n\n    if (!loading && filesContent.length) {\n        const [{ content, name }] = filesContent;\n\n        try {\n            const jsonValue = JSON.parse(content);\n\n            if (!(isPlainObject(jsonValue) || Array.isArray(jsonValue))) {\n                setErrorMessage({ title: 'Invalid data type', body: 'Must be either array or object' });\n            } else {\n                setErrorMessage(null);\n                eslintReportExplorerStore.setInputFile({ content: jsonValue, name });\n            }\n        } catch (e) {\n            setErrorMessage(\n                e instanceof Error\n                    ? { title: e.name, body: e.message }\n                    : {\n                          title: 'Unknown error',\n                          body: String(e),\n                      },\n            );\n        }\n\n        clear();\n    }\n\n    return (\n        <shared$.PaneWrapper>\n            <shared$.PaneContent>\n                <shared$.ScrollableBox>\n                    <ReactJson\n                        src={eslintReportExplorerStore.inputFile.content}\n                        enableClipboard={false}\n                        theme=\"monokai\"\n                    />\n                </shared$.ScrollableBox>\n                <shared$.NotificationBackdrop open={Boolean(errorMessage) || loading}>\n                    {loading && <CircularProgress size={24} />}\n                    {!loading && errorMessage && (\n                        <shared$.NotificationError variant=\"filled\" severity=\"error\" onClose={clearErrorMessage}>\n                            <AlertTitle>{errorMessage.title}</AlertTitle>\n                            {errorMessage.body}\n                        </shared$.NotificationError>\n                    )}\n                </shared$.NotificationBackdrop>\n            </shared$.PaneContent>\n            <AppBar position=\"static\">\n                <shared$.PaneToolbar variant=\"dense\">\n                    <$.FileName variant=\"caption\" display=\"block\">\n                        {eslintReportExplorerStore.inputFile.name}\n                    </$.FileName>\n                    <Box sx={{ flexGrow: 1 }} />\n                    <shared$.ToolbarButton\n                        variant=\"text\"\n                        size=\"small\"\n                        onClick={openFileSelector}\n                        endIcon={<FileOpenOutlinedIcon />}\n                    >\n                        Open\n                    </shared$.ToolbarButton>\n                </shared$.PaneToolbar>\n            </AppBar>\n        </shared$.PaneWrapper>\n    );\n});\n","import { styled, Box } from '@mui/material';\n\nexport const ReadonlyHandlerParts = styled(Box)(({ theme }) => ({\n    font: '14px/normal \"Monaco\", \"Menlo\", \"Ubuntu Mono\", \"Consolas\", \"source-code-pro\", monospace',\n    background: '#272822',\n    padding: theme.spacing(1),\n}));\n\nexport const HandlerKeyword = styled('span')(() => ({\n    fontStyle: 'normal',\n    color: '#66D9EF',\n}));\n\nexport const HandlerName = styled('span')(() => ({\n    color: '#A6E22E',\n}));\n\nexport const HandlerArg = styled('span')(() => ({\n    fontStyle: 'normal',\n    color: '#FD971F',\n}));\n\nexport const EditorWrapper = styled(Box)(({ theme }) => ({\n    height: '100%',\n    padding: theme.spacing(1, 2),\n}));\n","import React, { useEffect, useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Alert, AlertTitle, AppBar, Box, Tooltip, useTheme } from '@mui/material';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\nimport CopyAllOutlinedIcon from '@mui/icons-material/CopyAllOutlined';\nimport CodeOutlinedIcon from '@mui/icons-material/CodeOutlined';\nimport DoneIcon from '@mui/icons-material/Done';\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-javascript';\nimport 'ace-builds/src-noconflict/theme-monokai';\nimport 'ace-builds/src-noconflict/ext-language_tools';\nimport { useClipboard } from 'use-clipboard-copy';\nimport * as shared$ from '../../EslintReportExplorer.styled';\nimport * as $ from './CodeEditorPane.styled';\nimport { HANDLER_ARG_NAME, HANDLER_BODY, HANDLER_KEYWORD, HANDLER_NAME } from '../../core/input-json-handler';\nimport { useNonNullableContext } from '../../../../utils/UseNonNullableContext';\nimport { EslintReportExplorerStoreContext } from '../../EslintReportExplorerStore';\nimport { useErrorMessage } from '../../hooks/useErrorMessage';\n\nexport const CodeEditorPane: React.FC = observer(() => {\n    const eslintReportExplorerStore = useNonNullableContext(EslintReportExplorerStoreContext);\n    const theme = useTheme();\n\n    const clipboard = useClipboard();\n\n    const [hasCopied, setHasCopied] = useState(false);\n\n    const handleCopyClick = (): void => {\n        if (hasCopied) {\n            return;\n        }\n\n        setHasCopied(true);\n\n        clipboard.copy(eslintReportExplorerStore.handler.fn.toString());\n\n        setTimeout(() => setHasCopied(false), 250);\n    };\n\n    const { errorMessage: syntaxErrorMessage, setErrorMessage: setSyntaxErrorMessage } = useErrorMessage(null);\n\n    useEffect(() => {\n        const { error } = eslintReportExplorerStore.handler;\n\n        if (error) {\n            setSyntaxErrorMessage({\n                title: error.name,\n                body: error.message,\n            });\n        } else {\n            setSyntaxErrorMessage(null);\n        }\n    }, [eslintReportExplorerStore.handler, eslintReportExplorerStore.handler.error, setSyntaxErrorMessage]);\n\n    const {\n        errorMessage: executionErrorMessage,\n        setErrorMessage: setExecutionErrorMessage,\n        clearErrorMessage: clearExecutionErrorMessage,\n    } = useErrorMessage(null);\n\n    useEffect(() => {\n        const { error } = eslintReportExplorerStore.output;\n\n        if (error) {\n            setExecutionErrorMessage({\n                title: error.name,\n                body: error.message,\n            });\n        } else {\n            setExecutionErrorMessage(null);\n        }\n    }, [eslintReportExplorerStore.output, eslintReportExplorerStore.output.error, setExecutionErrorMessage]);\n\n    return (\n        <shared$.PaneWrapper>\n            <shared$.PaneContent>\n                <$.ReadonlyHandlerParts sx={{ borderBottom: `1px dashed ${theme.palette.divider}` }}>\n                    <$.HandlerKeyword>{HANDLER_KEYWORD}</$.HandlerKeyword>\n                    &nbsp;\n                    <$.HandlerName>{HANDLER_NAME}</$.HandlerName>(<$.HandlerArg>{HANDLER_ARG_NAME}</$.HandlerArg>\n                    )&nbsp;\n                    {'{'}\n                </$.ReadonlyHandlerParts>\n                <$.EditorWrapper>\n                    <AceEditor\n                        placeholder={HANDLER_BODY}\n                        mode=\"javascript\"\n                        theme=\"monokai\"\n                        width=\"100%\"\n                        height=\"100%\"\n                        onChange={eslintReportExplorerStore.setHandler}\n                        fontSize={14}\n                        showPrintMargin\n                        showGutter={false}\n                        highlightActiveLine={false}\n                        defaultValue={HANDLER_BODY}\n                        setOptions={{\n                            enableBasicAutocompletion: false,\n                            enableLiveAutocompletion: true,\n                            enableSnippets: false,\n                            tabSize: 2,\n                        }}\n                    />\n                </$.EditorWrapper>\n                <$.ReadonlyHandlerParts sx={{ borderTop: `1px dashed ${theme.palette.divider}` }}>\n                    {'}'}\n                </$.ReadonlyHandlerParts>\n                <shared$.NotificationBackdrop open={Boolean(executionErrorMessage)}>\n                    {executionErrorMessage && (\n                        <shared$.NotificationError\n                            variant=\"filled\"\n                            severity=\"error\"\n                            onClose={clearExecutionErrorMessage}\n                        >\n                            <AlertTitle>{executionErrorMessage.title}</AlertTitle>\n                            {executionErrorMessage.body}\n                        </shared$.NotificationError>\n                    )}\n                </shared$.NotificationBackdrop>\n            </shared$.PaneContent>\n            <AppBar position=\"static\">\n                <shared$.PaneToolbar variant=\"dense\">\n                    <Tooltip\n                        title={\n                            syntaxErrorMessage ? (\n                                <Alert variant=\"filled\" severity=\"error\">\n                                    <AlertTitle>{syntaxErrorMessage.title}</AlertTitle>\n                                    {syntaxErrorMessage.body}\n                                </Alert>\n                            ) : (\n                                <Alert variant=\"filled\" severity=\"success\">\n                                    No syntax errors\n                                </Alert>\n                            )\n                        }\n                        componentsProps={{ tooltip: { sx: { padding: 0 } } }}\n                    >\n                        <shared$.ToolbarIconButton\n                            size=\"small\"\n                            color={syntaxErrorMessage ? 'error' : 'success'}\n                            sx={{ cursor: 'help' }}\n                        >\n                            {syntaxErrorMessage ? <ErrorOutlineIcon /> : <CheckCircleOutlineIcon />}\n                        </shared$.ToolbarIconButton>\n                    </Tooltip>\n                    <Box sx={{ flexGrow: 1 }} />\n                    <shared$.ToolbarButton\n                        variant=\"text\"\n                        color=\"secondary\"\n                        size=\"small\"\n                        onClick={handleCopyClick}\n                        endIcon={hasCopied ? <DoneIcon /> : <CopyAllOutlinedIcon />}\n                    >\n                        Copy\n                    </shared$.ToolbarButton>\n                    <shared$.ToolbarButton\n                        variant=\"text\"\n                        size=\"small\"\n                        disabled={Boolean(syntaxErrorMessage)}\n                        onClick={eslintReportExplorerStore.applyHandlerToInputFileContent}\n                        endIcon={<CodeOutlinedIcon />}\n                    >\n                        Run\n                    </shared$.ToolbarButton>\n                </shared$.PaneToolbar>\n            </AppBar>\n        </shared$.PaneWrapper>\n    );\n});\n","import React, { useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { AlertTitle, AppBar, Box } from '@mui/material';\nimport FileDownloadOutlinedIcon from '@mui/icons-material/FileDownloadOutlined';\nimport ReactJson from 'react-json-view';\nimport fileDownload from 'js-file-download';\nimport { isPlainObject } from 'lodash-es';\nimport * as shared$ from '../../EslintReportExplorer.styled';\nimport { useNonNullableContext } from '../../../../utils/UseNonNullableContext';\nimport { EslintReportExplorerStoreContext } from '../../EslintReportExplorerStore';\nimport { useErrorMessage } from '../../hooks/useErrorMessage';\n\nexport const OutputJSONPane: React.FC = observer(() => {\n    const eslintReportExplorerStore = useNonNullableContext(EslintReportExplorerStoreContext);\n\n    const { errorMessage, setErrorMessage } = useErrorMessage(null);\n\n    const handleSaveClick = (): void => {\n        if (eslintReportExplorerStore.output.error) {\n            return;\n        }\n\n        let stringifiedOutput;\n\n        try {\n            stringifiedOutput = JSON.stringify(eslintReportExplorerStore.output.value, null, 2);\n        } catch (e) {\n            setErrorMessage(\n                e instanceof Error\n                    ? { title: e.name, body: e.message }\n                    : {\n                          title: 'Unknown error',\n                          body: String(e),\n                      },\n            );\n        }\n\n        if (stringifiedOutput !== undefined) {\n            fileDownload(stringifiedOutput, 'output.json');\n        }\n    };\n\n    useEffect(() => {\n        const { value } = eslintReportExplorerStore.output;\n\n        if (!(isPlainObject(value) || Array.isArray(value))) {\n            setErrorMessage({ title: 'Invalid data type', body: 'Must be either array or object' });\n        } else {\n            setErrorMessage(null);\n        }\n    }, [eslintReportExplorerStore.output, eslintReportExplorerStore.output.value, setErrorMessage]);\n\n    return (\n        <shared$.PaneWrapper>\n            <shared$.PaneContent>\n                {!errorMessage && (\n                    <shared$.ScrollableBox>\n                        <ReactJson src={eslintReportExplorerStore.output.value} theme=\"monokai\" />\n                    </shared$.ScrollableBox>\n                )}\n                <shared$.NotificationBackdrop open={Boolean(errorMessage)}>\n                    {errorMessage && (\n                        <shared$.NotificationError variant=\"filled\" severity=\"error\">\n                            <AlertTitle>{errorMessage.title}</AlertTitle>\n                            {errorMessage.body}\n                        </shared$.NotificationError>\n                    )}\n                </shared$.NotificationBackdrop>\n            </shared$.PaneContent>\n            <AppBar position=\"static\">\n                <shared$.PaneToolbar variant=\"dense\">\n                    <Box sx={{ flexGrow: 1 }} />\n                    <shared$.ToolbarButton\n                        variant=\"text\"\n                        color=\"success\"\n                        size=\"small\"\n                        disabled={Boolean(errorMessage) || Boolean(eslintReportExplorerStore.output.error)}\n                        onClick={handleSaveClick}\n                        endIcon={<FileDownloadOutlinedIcon />}\n                    >\n                        Save\n                    </shared$.ToolbarButton>\n                </shared$.PaneToolbar>\n            </AppBar>\n        </shared$.PaneWrapper>\n    );\n});\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { AppBar, Toolbar, useTheme, Box } from '@mui/material';\nimport { SplitPane } from 'react-collapse-pane';\nimport { ExportJSONPane } from './components/InputJSONPane';\nimport { CodeEditorPane } from './components/CodeEditorPane';\nimport { OutputJSONPane } from './components/OutputJSONPane';\nimport * as $ from './EslintReportExplorer.styled';\n\nexport const EslintReportExplorer: React.FC = observer(() => {\n    const theme = useTheme();\n\n    return (\n        <$.EslintReportExplorer maxWidth=\"xl\">\n            <$.InnerContainer>\n                <AppBar position=\"static\">\n                    <Toolbar variant=\"dense\">\n                        <$.LinkWithIcon\n                            href=\"https://github.com/levaleks/json-reducer\"\n                            underline=\"hover\"\n                            target=\"_blank\"\n                            rel=\"noopener\"\n                        >\n                            <img\n                                src={`${process.env.PUBLIC_URL}/github-mark-light.png`}\n                                alt=\"Github\"\n                                width={24}\n                                height={24}\n                            />\n                            JSON Reducer\n                        </$.LinkWithIcon>\n                        <Box sx={{ flexGrow: 1 }} />\n                        <$.LinkWithIcon\n                            href=\"https://savelife.in.ua/en/donate-en\"\n                            underline=\"hover\"\n                            target=\"_blank\"\n                            rel=\"noopener\"\n                        >\n                            <img\n                                src={`${process.env.PUBLIC_URL}/savelife-white.png`}\n                                alt=\"Come Back Alive\"\n                                width={17}\n                                height={22}\n                            />\n                            SUPPORT UKRAINE\n                        </$.LinkWithIcon>\n                    </Toolbar>\n                </AppBar>\n                <$.SplitPaneWrapper elevation={2}>\n                    <SplitPane\n                        split=\"vertical\"\n                        resizerOptions={{\n                            css: {\n                                width: '1px',\n                                background: theme.palette.divider,\n                            },\n                        }}\n                    >\n                        <ExportJSONPane />\n                        <CodeEditorPane />\n                        <OutputJSONPane />\n                    </SplitPane>\n                </$.SplitPaneWrapper>\n            </$.InnerContainer>\n        </$.EslintReportExplorer>\n    );\n});\n","import { createTheme } from '@mui/material';\n\nexport const muiTheme = createTheme({\n    palette: {\n        mode: 'dark',\n    },\n});\n","import React, { useState } from 'react';\nimport { CssBaseline, GlobalStyles } from '@mui/material';\nimport { ThemeProvider } from '@mui/material/styles';\nimport '@fontsource/roboto';\nimport { useBeforeunload } from 'react-beforeunload';\nimport {\n    EslintReportExplorer,\n    EslintReportExplorerStore,\n    EslintReportExplorerStoreContext,\n} from './EslintReportExplorer';\nimport { muiTheme } from './muiTheme';\n\nexport const App: React.FC = () => {\n    const [eslintReportExplorerStore] = useState(new EslintReportExplorerStore());\n\n    useBeforeunload((e) => {\n        if (eslintReportExplorerStore.shouldShowOnBeforeUnloadPopup) {\n            e.preventDefault();\n        }\n    });\n\n    return (\n        <ThemeProvider theme={muiTheme}>\n            <CssBaseline />\n            <GlobalStyles\n                styles={{\n                    'body, html, #app': {\n                        height: '100%',\n                    },\n                }}\n            />\n            <EslintReportExplorerStoreContext.Provider value={eslintReportExplorerStore}>\n                <EslintReportExplorer />\n            </EslintReportExplorerStoreContext.Provider>\n        </ThemeProvider>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('app'),\n);\n"],"sourceRoot":""}